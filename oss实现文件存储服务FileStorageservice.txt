package com.yonyoucloud.ec.sns.starter.file.storage;

import com.yonyoucloud.ec.sns.error.ECIllegalArgumentException;
import com.yonyoucloud.ec.sns.error.ECRemoteServiceException;
import com.yonyoucloud.ec.sns.error.ECResourceNotFoundException;
import com.yonyoucloud.ec.sns.starter.timing.method.RecordTime;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;



public interface FileStorageService {

    String HTTP_PROTOCOL_PLAIN = "http";

    /**
     * 返回存储实现的具体类型
     *
     * @return 存储介质类型
     */
    FileStorageType getStorageType();

    /**
     * 上传文件
     *
     * @param file                  文件对象, 必须存在,可读且不为文件夹
     * @param withDownloadUrlPrefix 是否拼接下载URL前缀
     * @return 文件的下载地址
     * @throws IllegalArgumentException 当文件无效抛出
     */
    String upload(File file, boolean withDownloadUrlPrefix);

    /**
     * 上传文件
     *
     * @param file                  文件对象, 必须存在,可读且不为文件夹
     * @param withDownloadUrlPrefix 是否拼接下载URL前缀
     * @return 文件的下载地址
     * @throws IllegalArgumentException 当文件无效抛出
     */
    String upload(File file, boolean withDownloadUrlPrefix, boolean corsEnable);

    /**
     * 上传文件
     *
     * @param stream                文件的输入流
     * @param withDownloadUrlPrefix 是否拼接下载URL前缀
     * @param fileName              文件名,下载时显示
     * @return 文件的下载地址
     */
    String upload(InputStream stream, boolean withDownloadUrlPrefix, String fileName);

    /**
     * 上传文件
     *
     * @param stream                文件的输入流
     * @param withDownloadUrlPrefix 是否拼接下载URL前缀
     * @param fileName              文件名,下载时显示
     * @return 文件的下载地址
     */
    String upload(InputStream stream, boolean withDownloadUrlPrefix, String fileName, boolean corsEnable);

    /**
     * 上传文件
     *
     * @param stream                文件的输入流
     * @param fileExtension         文件后缀
     * @param withDownloadUrlPrefix 是否拼接下载URL前缀
     * @return 文件的下载地址
     */
    String upload(InputStream stream, String fileExtension, boolean withDownloadUrlPrefix);

    /**
     * 上传文件
     *
     * @param stream                文件的输入流
     * @param fileExtension         文件后缀
     * @param withDownloadUrlPrefix 是否拼接下载URL前缀
     * @return 文件的下载地址
     */
    String upload(InputStream stream, String fileExtension, boolean withDownloadUrlPrefix, boolean corsEnable);

    /**
     * 上传文件到指定位置
     *
     * @param stream                文件的输入流
     * @param withDownloadUrlPrefix 是否拼接下载URL前缀
     * @param path                  文件路径
     * @return 文件的下载地址
     * @throws UnsupportedOperationException fastdfs等不支持本方法
     */
    String uploadToSpecifyPath(InputStream stream, String path, boolean withDownloadUrlPrefix)
            throws UnsupportedOperationException;

    /**
     * 上传文件到指定位置
     *
     * @param stream                文件的输入流
     * @param withDownloadUrlPrefix 是否拼接下载URL前缀
     * @param path                  文件路径
     * @return 文件的下载地址
     * @throws UnsupportedOperationException fastdfs等不支持本方法
     */
    String uploadToSpecifyPath(InputStream stream, String path, boolean withDownloadUrlPrefix, boolean corsEnable)
            throws UnsupportedOperationException;

    /**
     * 构建下载链接
     *
     * @param remotePath 远程相对路径
     * @return 完整的下载地址
     */
    String buildDownloadUrl(String remotePath);


    /**
     * 从远程下载文件
     *
     * @param remotePath 远程路径
     * @return 文件的byte数组
     */
    @RecordTime
    default byte[] downloadFile(String remotePath) {

        URL url = buildURLObject(remotePath);

        byte[] bytes;

        try (InputStream input = url.openStream()) {
            bytes = IOUtils.toByteArray(input);
        } catch (IOException e) {//如果出现异常, 尝试使用OSSClient进行下载
            throw new ECRemoteServiceException("Download File failed", e);
        }

        return bytes;
    }


    /**
     * 根据相对路径或绝对路径获取文件流
     *
     * @param remotePath 远程路径
     * @return 文件流
     */
    default InputStream downloadFileStream(String remotePath) {

        URL url = buildURLObject(remotePath);

        try {
            return url.openStream();
        } catch (IOException e) {
            String msg = "Failed open file " + remotePath + " input stream from oss service";
            throw new ECRemoteServiceException(msg, e);
        }
    }


    /**
     * 下载文件到指定路径
     *
     * @param remotePath 远程路径
     * @param folder     文件夹
     * @param fileName   文件名称
     * @return 文件在本地的完整路径
     */
    @RecordTime
    default File downloadFile(String remotePath, File folder, String fileName) {

        URL url = buildURLObject(remotePath);


        File distFile;
        try (InputStream input = url.openStream()) {
            distFile = new File(folder, fileName);
            IOUtils.copy(input, new FileOutputStream(distFile));
        } catch (IOException e) {
            throw new ECResourceNotFoundException("download ossProperties failed with remote path " + remotePath, e);
        }


        return distFile;
    }

    /**
     * 构建下载地址
     *
     * @param remotePath 下载地址
     * @return 地址对象
     * @throws ECIllegalArgumentException 地址格式不正确是抛出
     */
    default URL buildURLObject(String remotePath) {

        String realRemotePath = buildDownloadUrl(remotePath);

        URL url;
        try {
            url = new URL(realRemotePath);
        } catch (MalformedURLException e) {
            throw new ECIllegalArgumentException("Invalid OSS remote path " + realRemotePath, e);
        }
        return url;
    }

    /**
     * 下载文件到本地
     *
     * @param items  文件条目
     * @param folder 下载到文件夹
     * @return 文件实体列表
     */
    default List<File> downloadAttachments(List<String> items, File folder) {

        List<File> files = new ArrayList<>(items.size());
        items.forEach(aliOSSUrl -> {
            if (StringUtils.isNotBlank(aliOSSUrl) && aliOSSUrl.startsWith(HTTP_PROTOCOL_PLAIN)) {
                File file = downloadFile(aliOSSUrl, folder, UUID.randomUUID().toString());
                files.add(file);
            } else {
                throw new ECIllegalArgumentException("Invalid OSS URL, file download failed with url " + aliOSSUrl);
            }
        });
        return files;
    }

    /**
     * 拷贝文件,目前只用于oss
     *
     * @param sourceObjectName      源文件名称
     * @param destinationBucketName 目标存储空间名称
     * @param destinationObjectName 目标文件名称
     * @param deleteSourceObject    是否删除源文件
     * @param contentType           复制后的文件类型
     */
    void copyObject(String sourceObjectName, String destinationBucketName, String destinationObjectName,
                    boolean deleteSourceObject, String contentType);

    /**
     * 判断文件是否存在
     *
     * @param objectName 文件名
     * @return 是否存在
     */
    Boolean objectExist(String objectName);


    /**
     * 获取签名下载地址
     *
     * @param remotePath 下载地址
     * @param expiration 过期时间（毫秒）
     * @return 获取签名下载地址
     */
    String getSignatureUrl(String remotePath, long expiration);

}


-------------------------------------------------------------------------------实现-----------------------------------------------------------------------------------------------------



package com.yonyoucloud.ec.sns.starter.file.oss.domain;

import com.aliyun.oss.OSSClient;
import com.aliyun.oss.model.CopyObjectRequest;
import com.aliyun.oss.model.CopyObjectResult;
import com.aliyun.oss.model.DownloadFileRequest;
import com.aliyun.oss.model.ObjectMetadata;
import com.yonyoucloud.ec.sns.error.ECIllegalArgumentException;
import com.yonyoucloud.ec.sns.error.ECRemoteServiceException;
import com.yonyoucloud.ec.sns.starter.core.module.ApplicationDirectory;
import com.yonyoucloud.ec.sns.starter.core.support.http.FileDownloadHeaderBuilder;
import com.yonyoucloud.ec.sns.starter.file.UpesnFileProperties;
import com.yonyoucloud.ec.sns.starter.file.oss.OssProperties;
import com.yonyoucloud.ec.sns.starter.file.policy.name.FileRemotePathPolicy;
import com.yonyoucloud.ec.sns.starter.file.storage.FileStorageService;
import com.yonyoucloud.ec.sns.starter.file.storage.FileStorageType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Date;
import java.util.UUID;
import java.util.regex.Pattern;

/**
 * 文件存储服务, OSS实现
 *
 * @author liuhaoi
 * @date 2017/7/13
 */
@Slf4j
@RequiredArgsConstructor
public class FileStorageServiceOSSImpl implements FileStorageService {

    private static final String HTTP_PROTOCOL_PLAIN = "http";

    private final OssProperties ossProperties;

    private final UpesnFileProperties upesnFileProperties;

    private final OSSClientManager ossClientManager;

    private final FileRemotePathPolicy fileNamePolicy;

    private final ApplicationDirectory applicationDirectory;

    private ObjectMetadata buildDefaultMetadata() {
        ObjectMetadata metadata = new ObjectMetadata();
        long expireTimestamp = System.currentTimeMillis() + ossProperties.getExpirationDelaySecond() * 1000;
        metadata.setExpirationTime(new Date(expireTimestamp));
        return metadata;
    }

    @Override
    public FileStorageType getStorageType() {
        return FileStorageType.OSS;
    }

    @Override
    public String upload(File file, boolean withDownloadUrlPrefix) {
        return upload(file, withDownloadUrlPrefix, buildDefaultMetadata(), upesnFileProperties.getDefaultCorsEnable());
    }

    @Override
    public String upload(File file, boolean withDownloadUrlPrefix, boolean corsEnable) {
        return upload(file, withDownloadUrlPrefix, buildDefaultMetadata(), corsEnable);
    }

    @Override
    public String upload(InputStream stream, boolean withDownloadUrlPrefix, String fileName) {

        ObjectMetadata objectMetadata = buildDefaultMetadata();
        objectMetadata.setContentDisposition(FileDownloadHeaderBuilder.buildDispositionHeaderValue(fileName));

        return upload(stream, FilenameUtils.getExtension(fileName), withDownloadUrlPrefix, objectMetadata);
    }

    @Override
    public String upload(InputStream stream, boolean withDownloadUrlPrefix, String fileName, boolean corsEnable) {
        return null;
    }

    @Override
    public String upload(InputStream stream, String fileExtension, boolean withDownloadUrlPrefix) {
        return upload(stream, fileExtension, withDownloadUrlPrefix, upesnFileProperties.getDefaultCorsEnable());
    }

    @Override
    public String upload(InputStream stream, String fileExtension, boolean withDownloadUrlPrefix, boolean corsEnable) {
        String remotePath = fileNamePolicy.buildFileName(fileExtension);
        return uploadToSpecifyPath(stream, remotePath, withDownloadUrlPrefix, buildDefaultMetadata(), corsEnable);
    }


    private String upload(InputStream stream, String fileExtension, boolean withDownloadUrlPrefix,
                          ObjectMetadata metadata) {

        String remotePath = fileNamePolicy.buildFileName(fileExtension);
        return uploadToSpecifyPath(stream, remotePath, withDownloadUrlPrefix, metadata,
                upesnFileProperties.getDefaultCorsEnable());
    }

    private String upload(File file, boolean withDownloadUrlPrefix, ObjectMetadata metadata, boolean corsEnable) {
        String remoteFilePath = fileNamePolicy.buildFileName(FilenameUtils.getExtension(file.getName()));

        if (!file.exists() || file.isDirectory() || !file.canRead()) {
            throw new IllegalArgumentException("invalid file when upload to oss " + file);
        }

        try (FileInputStream fileInputStream = new FileInputStream(file)) {
            return uploadToSpecifyPath(fileInputStream, remoteFilePath, withDownloadUrlPrefix, metadata, corsEnable);
        } catch (IOException e) {
            throw new ECRemoteServiceException("upload file to oss failed", e);
        }
    }

    @Override
    public String uploadToSpecifyPath(InputStream stream, String remotePath,
                                      boolean withDownloadUrlPrefix) throws UnsupportedOperationException {
        return uploadToSpecifyPath(stream, remotePath, withDownloadUrlPrefix, buildDefaultMetadata(),
                upesnFileProperties.getDefaultCorsEnable());
    }

    @Override
    public String uploadToSpecifyPath(InputStream stream, String remotePath, boolean withDownloadUrlPrefix,
                                      boolean corsEnable) throws UnsupportedOperationException {
        return uploadToSpecifyPath(stream, remotePath, withDownloadUrlPrefix, buildDefaultMetadata(), corsEnable);
    }

    public String uploadToSpecifyPath(InputStream stream, String remotePath, boolean withDownloadUrlPrefix,
                                      ObjectMetadata metadata,
                                      boolean corsEnable) throws UnsupportedOperationException {

        String pattern = "http(s)?://.*";

        boolean isMatch = Pattern.matches(pattern, remotePath);
        if (isMatch) {
            throw new ECIllegalArgumentException("remote path can't contains http:// or https://");
        }

        if (metadata == null) {
            metadata = new ObjectMetadata();
        }

        if (corsEnable) {
            metadata.setHeader("Access-Control-Allow-Origin", "*");
            metadata.setHeader("Access-Control-Max-Age", "1209600");
            metadata.setHeader("Access-Control-Allow-Methods", "GET");
            metadata.setHeader("Access-Control-Allow-Headers",
                    "X-Requested-With, X-HTTP-Method-Override, origin, content-type, accept, authorization, access-control-request-method");

        }

        OSSClient ossClient = ossClientManager.getOSSClient();

        try {
            ossClient.putObject(ossProperties.getBucketName(), remotePath, stream, metadata);
        } finally {
            ossClientManager.releaseOSSClient(ossClient);
        }

        if (!withDownloadUrlPrefix) {
            return remotePath;
        }

        return buildDownloadUrl(remotePath);
    }

    @Override
    public String buildDownloadUrl(String remotePath) {

        if (remotePath.startsWith(HTTP_PROTOCOL_PLAIN)) {
            return remotePath;
        }
        return ossProperties.concatURL(ossProperties.getDownloadUrlPrefix(), remotePath);
    }

    @Override
    public byte[] downloadFile(String remotePath) {
        try {
            return FileStorageService.super.downloadFile(remotePath);
        } catch (Exception e) {
            return downloadFileByOssClient(remotePath);
        }
    }

    @Override
    public void copyObject(String sourceObjectName, String destinationBucketName, String destinationObjectName,
                           boolean deleteSourceObject, String contentType) {

        // 创建OSSClient实例。
        OSSClient ossClient = ossClientManager.getOSSClient();

        // 创建CopyObjectRequest对象。
        CopyObjectRequest copyObjectRequest;
        if (destinationBucketName == null) {
            copyObjectRequest = new CopyObjectRequest(ossProperties.getBucketName(), sourceObjectName,
                    ossProperties.getBucketName(), destinationObjectName);
        } else {
            copyObjectRequest = new CopyObjectRequest(ossProperties.getBucketName(), sourceObjectName,
                    destinationBucketName, destinationObjectName);
        }

        if (contentType != null) {
            ObjectMetadata meta = new ObjectMetadata();
            meta.setContentType(contentType);
            copyObjectRequest.setNewObjectMetadata(meta);
        }

        // 复制文件。
        try {
            CopyObjectResult result = ossClient.copyObject(copyObjectRequest);
            log.info("ETag: " + result.getETag() + " LastModified: " + result.getLastModified());

            if (deleteSourceObject) {
                ossClient.deleteObject(ossProperties.getBucketName(), sourceObjectName);
                log.info("file " + sourceObjectName + "has been deleted");
            }
        } finally {
            ossClientManager.releaseOSSClient(ossClient);
        }

    }

    @Override
    public Boolean objectExist(String objectName) {

        OSSClient ossClient = ossClientManager.getOSSClient();
        Boolean found;
        try {
            found = ossClient.doesObjectExist(ossProperties.getBucketName(), objectName);
        } finally {
            ossClientManager.releaseOSSClient(ossClient);
        }
        return found;
    }

    /**
     * 使用ossClient从远程下载文件
     *
     * @param remotePath 远程路径
     * @return 文件的byte数组
     */
    private byte[] downloadFileByOssClient(String remotePath) {

        File tempFolder = applicationDirectory.getTempDirectory();

        String tempPath = tempFolder.getAbsolutePath() + File.separator + UUID.randomUUID().toString();

        String key = remotePath;
        if (remotePath.startsWith(HTTP_PROTOCOL_PLAIN)) {
            key = remotePath.substring(remotePath.indexOf('/', 8) + 1);
        }

        DownloadFileRequest request = new DownloadFileRequest(ossProperties.getBucketName(), key,
                tempPath, 1024 * 100);

        OSSClient ossClient = ossClientManager.getOSSClient();

        try {
            ossClient.downloadFile(request);
        } catch (Throwable e) {
            throw new ECRemoteServiceException("read ossProperties from oss failed", e);
        } finally {
            ossClientManager.releaseOSSClient(ossClient);
        }

        byte[] bytes;
        try {
            bytes = IOUtils.toByteArray(new FileInputStream(tempPath));
        } catch (IOException e) {
            throw new ECRemoteServiceException("read ossProperties from local failed", e);
        }

        FileUtils.deleteQuietly(new File(tempPath));
        return bytes;

    }

    @Override
    public String getSignatureUrl(String remotePath, long expiration) {

        //全路径截取remotePath
        if (remotePath.startsWith(HTTP_PROTOCOL_PLAIN)) {

            String prefix = ossProperties.getDownloadUrlPrefix() + "/";

            remotePath = remotePath.contains(prefix) ? remotePath.substring(prefix.length()) : remotePath;
        }

        OSSClient ossClient = ossClientManager.getOSSClient();

        try {
            URL url = ossClient.generatePresignedUrl(ossProperties.getBucketName(), remotePath, new Date(expiration));

            return url.toString();
        } finally {
            ossClientManager.releaseOSSClient(ossClient);
        }

    }
}
