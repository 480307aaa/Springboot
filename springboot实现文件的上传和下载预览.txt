/**
     * 方案上传
     */
    @PreAuthorize("@ss.hasPermi('knowledge:file:upload')")
    @Log(title = "知识库系统-方案上传", businessType = BusinessType.UPLOAD)
    @PostMapping("/upload")
    @ApiOperation("方案上传")
    //ftp处理文件上传
    public AjaxResult uploadImg(@RequestParam("file") MultipartFile file) throws IOException {

        String fileName = file.getOriginalFilename();
        InputStream inputStream = file.getInputStream();

        boolean flag = FtpFileUtil.uploadFile(fileName, inputStream, ftpHostName, ftpPort, ftpUserName, ftpPassWord);

        int addToAttach = 0;

        KnowledgeAttach knowledgeAttach = null;
        //文件上传成功则在数据库中写入附件库
        if (flag) {
            knowledgeAttach = knowledgeAttachService.selectKnowledgeAttachByName(fileName);
            if (knowledgeAttach != null) {
                //更新日期即可
                knowledgeAttach.setUpdateTime(DateUtils.getNowDate());
                addToAttach = knowledgeAttachService.updateKnowledgeAttach(knowledgeAttach);
            } else {
                knowledgeAttach = new KnowledgeAttach();
                knowledgeAttach.setAttachName(fileName);
                knowledgeAttach.setRemoteDirPath("/home/ftpuser");
                knowledgeAttach.setAttachUrl("http://" + ftpHostName + "/" + fileName);
                knowledgeAttach.setCreateTime(DateUtils.getNowDate());
                knowledgeAttach.setUpdateTime(DateUtils.getNowDate());
                knowledgeAttach.setAttachSize(file.getSize());

                addToAttach = knowledgeAttachService.insertKnowledgeAttach(knowledgeAttach);

            }
        }
        //将此次上传记录在上传记录表
        int addToUploadOperation = 0;
        if (addToAttach > 0) {

            KnowledgeUploadOperation knowledgeUploadOperation = new KnowledgeUploadOperation();
            knowledgeUploadOperation.setSchemeName(fileName);
            knowledgeUploadOperation.setCreateTime(DateUtils.getNowDate());
            addToUploadOperation = knowledgeUploadOperationService.insertKnowledgeUploadOperation(knowledgeUploadOperation);
        } else {
            return AjaxResult.error("上传方案的附件未写入附件库");
        }

        Attach attach = new Attach();
        attach.setAttachId(knowledgeAttach.getAttachId());
        attach.setDownloadUrl(knowledgeAttach.getAttachUrl());

        return addToUploadOperation > 0 ? AjaxResult.success(attach) : AjaxResult.error("上传失败，上传记录表为空");
    }
	
	
	
	
	
	
	
	/**
     * 方案下载
     */
    @PreAuthorize("@ss.hasPermi('knowledge:file:download')")
    @Log(title = "知识库系统-方案下载", businessType = BusinessType.DOWNLOAD)
    @PostMapping("/download")
    @ApiOperation("方案下载")

    public void downloadNet(String uri, boolean isOnLine, HttpServletResponse response) throws MalformedURLException {

        // 下载网络文件
        InputStream inStream = null;
        OutputStream fs = null;

        URL url = new URL(uri);
        String filename = uri.substring(uri.lastIndexOf("/") + 1);
        try {
            URLConnection conn = url.openConnection();
            // 设置超时间为3秒
            conn.setConnectTimeout(3 * 1000);
            // 防止屏蔽程序抓取而返回403错误
            conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36");
            inStream = new BufferedInputStream(conn.getInputStream());
            int len = 0;
            response.reset();
            if (isOnLine) { // 在线打开方式
                response.setContentType(conn.getContentType());
                response.setHeader("Content-Disposition", "inline; filename=" + filename);
                response.setHeader("Access-Control-Allow-Origin", "*");
                response.setHeader("Access-Control-Allow-Credentials", "true");
                response.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, " +
                        "WG-App-Version, WG-Device-Id, WG-Network-Type, WG-Vendor, WG-OS-Type, WG-OS-Version, WG-Device-Model, WG-CPU, WG-Sid, WG-App-Id, WG-Token");
                response.setHeader("Vary", "Origin");
                // 文件名应该编码成UTF-8
            } else { // 纯下载方式
                response.setContentType("application/x-msdownload");
                response.setHeader("Content-Disposition", "attachment; filename=" + filename);
                response.setHeader("Access-Control-Allow-Origin", "*");
                response.setHeader("Access-Control-Allow-Credentials", "true");
                response.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, " +
                        "WG-App-Version, WG-Device-Id, WG-Network-Type, WG-Vendor, WG-OS-Type, WG-OS-Version, WG-Device-Model, WG-CPU, WG-Sid, WG-App-Id, WG-Token");
                response.setHeader("Vary", "Origin");
            }

            fs = new BufferedOutputStream(response.getOutputStream());

            byte[] buffer = new byte[1024];
            while ((len = inStream.read(buffer)) > 0)
                fs.write(buffer, 0, len);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (null != inStream) {
                try {
                    inStream.close();
                } catch (IOException e) {
                }
            }
            if (null != fs) {
                try {
                    fs.close();
                } catch (IOException e) {
                }
            }
        }
    }